############################################################################### CONFIGURATION DE JENKINS ###################################################################################################################

-> Une fois que votre interface Jenkins est opérationnelle à l'adresse : http://VOTRE.IP.DE.MACHINE:8080

1. CONFIGURATION DES OUTILS

Tableau de bord -> Administrer Jenkins -> Configuration globale des outils -> JDK -> AJOUTER JDK | Dans JDK Nom : jdk11 | Dans JAVA_HOME : /usr/lib/jvm/java-11-openjdk-amd64
                                                                              MAVEN -> AJOUTER MAVEN | Dans Maven Nom : M3
                                                                           -> On peut aussi faire la même chose pour jdk17 /usr/lib/jvm/java-17-openjdk-amd64
Appliquer et Enregistrer (en bas de la page)


2. AJOUT DE CREDENTIAL POUR SE CONNECTER AU REPO DISTANT

Tableau de bord -> Administrer Jenkins -> Credentials (Configure Credentials) -> Stores scoped to Jenkins -> Domains (globals) -> Add Credentials

Dans  : New credentials
                          -> Type: SSH Username with private key
                          -> Username: matthcol
                          -> Private Key : Enter directly -> Key -> ADD -> Coller la clef ssh privée



3. CREATION D'UN PIPELINE

Tableau de bord -> Nouveau Item -> Saisissez un nom : movieapi -> Selectionner Pipeline -> OK.


4. PIPELINE SCRIPT

-> En bas de la page : Pipeline | Définition : Pipeline script : Coller le contenu du fichier jenkinsfile de ce repo github.

-> Dans le script à la partie stage('Git') :

 stage('Git') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'git@github.com:matthcol/movieapi2k3.git',
                        credentialsId: 'ICI COPIER COLLER L'ID TROUVER DANS : Tableau de bord -> Administrer Jenkins -> Credentials (Configure Credentials): ID'
                    ]]
                ])


-> Dans le script  à la partie stage('Delivery'):
       stage('Delivery') {
            steps {
                script {
                    // Define details of the remote machine
                    def remoteHost = 'CHANGER PAR L'IP DE VOTRE MACHINE' /!\ IL SAGIT DE LA MACHINE delivery@repository /!\
                    def remoteUser = "${params.USER}"
                    def remotePath = '/home/delivery/stockage/movieapi.jar'    ( le repertoire stockage doit exister )

                    // Build the full path of the JAR file
                    def jarFileName = sh(script: 'ls target/*.jar', returnStdout: true).trim()
                    def jarFilePath = "${env.WORKSPACE}/${jarFileName}"

                    // Execute the scp command with the given credentials to transfer the JAR file to the remote machine
                    sh "scp -i /home/projetparis1/.ssh/NOM DE LA CLEF SSH PRIVE SUR JENKINS ${jarFilePath} ${remoteUser}@${remoteHost}:${remotePath}"
                }
            }
        }
        
        
5. LANCER SON PREMIER BUILD BACKEND
-> prerequis : avoir une connection ssh de faite entre les deux hotes (jenkins et delivery cf : https://github.com/Seruphel/PROJET-POEI/blob/main/JENKINS/connection_jenkis_host_delivery_host)

lancer un pipeline avec comme configuration >  java 17 et les parametres indiqué dans le script






                        


